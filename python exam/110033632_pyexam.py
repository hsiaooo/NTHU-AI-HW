# -*- coding: utf-8 -*-
"""110033632_PyExam.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MJe5hiyw0P1zhyWPKypcmKiwqGWOy455

# **Introduction to AI - Python Exam**
* Only Python implementation will be accepted.
* **Never Ever PLAGIARIZE.** (We will check program similarity.)
* Save and create a copy of this notebook, coding in your own notebook.

# Submission

* Due day: **2021.09.23 12:00 noon**
* Source code
  * **StudentID_PyExam.ipynb**: contains all the results and codes for this exam.
  * **StudentID_PyExam.py**: the content of this file must be consistent with .ipynb file.
  * **output.csv**: the specify data assigned in last question.
* You have to submit the three files. Only the above three files will be accepted, so the code of two exercises should be written in **one** .py file.

# 1. List and Tuple

Read data row by row from the phone book **`people.csv`**, and store the records as a list of tuple. Each tuple holds a record of a person. Please read the following description before you start.

Download **`people.csv`** via [this link](https://drive.google.com/file/d/1hoQCAIAWJh4e0MVsvXpqu0oVu84rKlSa/view?usp=sharing). 

The data are organized as follows:
1. Each record is seperated by a line break.
1. Each field is seperated by a comma.

What are the fields?
1. Name
1. Birthday (YYYY/mm/dd)
1. Country

###**Your Tasks**
**T1.** You are asked to write a program to read the **`people.csv`** file and convert the data into a list of tuple, in which the people are ordered by  their ages  (ascending). 
Your program **must** read the file **row by row**. Once you get a row, 
1. replace the person's birthday with her/his age,
1. convert the person's data into a tuple,
1. find proper location in the list and **insert the tuple** so that the list of people **remains sorted by age**. You may simply compute the age by `(current year - the year that a person was born)` (no need to consider month and date).

For example, a tuple should look like<br />
`("Jakeem Garza", 29, "Canada,Embourg")`<br />

If you print the list every time you read a new row, the changes should look like<br />
```
# Reading the 1st line
[ 
  ("Cullen Hopkins", 46, "United States"),
]
```

```
# Reading the 2nd line
[
  ("Stuart Joseph", 13, "France"),
  ("Cullen Hopkins", 46, "United States"),
]
```

```
# Reading the 3nd line
[ 
  ("Stuart Joseph", 13, "France"), 
  ("Cullen Hopkins", 46, "United States"), 
  ("Herrod Reilly", 100, "United States"),
]
```

```
# Reading the 4th line
[ 
  ("Stuart Joseph", 13, "France"), 
  ("Cullen Hopkins", 46, "United States"), 
  ("Elijah Clay", 52, "United Kingdom"), 
  ("Herrod Reilly", 100, "United States")
]
```
You can see that the people in the list are sort by their ages.
<br /><br />
**T2.** Find and remove from the list those people whose country is "United States" or "Cananda". After done, print the list.
<br /><br />
**T3.** Sort the remaining people by their last name (surname) and print the sorted list.

###**Hint**
How to read over the file and get one line at once?
"""

f = open("people.csv", "r")

for line in f:
  line = line[:-1]   # This will remove the ending '\n' from the line.
  print(line)
  

f.close()

"""**Answer of T1**"""

def del_1(li):
  li.remove(li[0])

def age(li, li_):
  temp = []
  for i in range(len(li)): # conver str to int
    y = int(li[i])
    temp.append(y)

  for j in range(len(temp)): 
    years_old = abs(temp[j] - 2021) # calculate ages
    li_.append(years_old)

def takeSecond(element): # get the second element
  return element[1]

def print_all(li):
  for i in range(len(li)):
    print(li[i])

def Stack(li):
  stack = []
  for i in range(len(li)):
    stack.append(li[i])
    print(stack)

Name = []
Year = []
Age = []
Country = []

f = open("people.csv", "r")

# Replace the person's birthday with her/his age
for line in f:
  line = line[:-1] # remove '\n'
  s_name = line.split(',', 1) # split from ,
  Name.append(s_name[0]) # add the first part of s_name, and this will be Name
  s_bir = s_name[1].split(',', 1) # split the second part of s_name from , and this will be Birthday and Country
  s_year = s_bir[0].split('/', 1) # split to the year
  Year.append(s_year[0]) 
  Country.append(s_bir[1])

del_1(Name); del_1(Year); del_1(Country) # delete the first str

age(Year, Age) # call the age function

# Convert the person's data into a tuple
persons = list(zip(Name, Age, Country)) # convert to list of tuple

# Sort by age
persons.sort(key=takeSecond) # sort the second element

print_all(persons) # If print raw by raw, it can't print out because it to long. So I print all by one times. 
# Stack(persons) # This function can print raw by raw.

"""**Answer of T2**"""

del_i = []
person = persons.copy()

for i in range(len(persons)): 
  if person[i][2] == 'Canada' or person[i][2] == 'United States': # if person[i][2] is Canada or United States, i will be recorded.
    del_i.append(i)

for j in reversed(del_i): # if use original del_i, it will error, so need to use reversed(del_i)
  del person[j]

print_all(person)

"""**Answer of T3**"""

person_ = person.copy()

person_.sort(key=lambda person_: person_[:][0].split()[-1]) # split the first name to sort.
print_all(person_)

"""# 2. Pandas DataFrame
* Download `wine.csv` via this [link](https://drive.google.com/file/d/1bHVv8qfL-2Jjk8vnmMFVe0x0EYcyBNBq/view?usp=sharing).
1. Read `wine.csv` into dataframe, then check the info of data (Print out some features of the dataframe).
2. Perform data pre-processing (standardization):  Z = (X - mean)/std.  (Do it with the information you got from 1., don't use packages or module functions.)
3. Slice data and leave only row 3 ~ 9 (include row 9), column 2 ~ 11 (include col 11).
4. Output an csv file `output.csv` without index.
"""

import pandas as pd

def ReadFile(filename):
  df = pd.read_csv('{}'.format(filename)) # read file
  return df

def standardization(df, cols):
  data = df.copy()
  for col in cols: 
      data_ = data[col].copy()

      Mean = data_.mean() # mean of each column
      Std = data_.std() # std of each column
      
      z_score = (data_ - Mean) / Std 
      data[col] = z_score

  return data

def export_csv(csv_name, df):
  df.to_csv(csv_name, index=False) # export csv

df = ReadFile('wine.csv')
print('Original df:\n', df)
print('------------------------------')
print('Describe of df:\n', df.describe())
print('------------------------------')
print(df.info())
print('------------------------------')
Standardization = pd.DataFrame(standardization(df, df.keys()))
print('After standardization:\n', Standardization)
print('------------------------------')
df_ = Standardization.iloc[3:10, 2:12]
print('Only raw 3 ~ 9, column 2 ~ 11:\n', df_)
export_csv('output.csv', df_)